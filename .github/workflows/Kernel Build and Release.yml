name: Kernel Build and Release

on:
  workflow_dispatch: # 手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm-slim # Debian 12
      options: --privileged # 启用特权模式

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        apt-get update
        # 精简依赖列表，修复包名问题
        DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev \
          g++-multilib libxml2-utils bzip2 libbz2-dev \
          squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng \
          libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl \
          libxml-simple-perl bc libc6-dev-i386 lib32ncurses-dev x11proto-core-dev \
          libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip bc clang \
          git-lfs gnupg gperf imagemagick \
          libelf-dev liblz4-tool libncurses-dev \
          libsdl1.2-dev libssl-dev libxml2 lzop rsync \
          xsltproc zip zlib1g-dev lld gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
        
        # 安装特定版本交叉编译工具链
        apt-get install -y --no-install-recommends crossbuild-essential-arm64

    - name: Setup ccache
      run: |
        echo "CCACHE_DIR=$(pwd)/.ccache" >> $GITHUB_ENV
        ccache -M 20G
        ccache -s

    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: .ccache
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache-

    - name: Build kernel
      run: |
        export ARCH=arm64
        # 使用精简命令集
        make CC="ccache clang" \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld \
          LDFLAGS="-fuse-ld=lld" \
          -j$(nproc) \
          evergo_defconfig

        make CC="ccache clang" \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld \
          LDFLAGS="-fuse-ld=lld" \
          -j$(nproc)

    - name: Show ccache stats
      run: ccache -s

    - name: Package artifacts
      run: |
        mkdir kernel-output
        cp arch/arm64/boot/* kernel-output/
        tar -czvf kernel-artifacts.tar.gz kernel-output

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-binaries
        path: kernel-artifacts.tar.gz
        retention-days: 7

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: kernel-${{ github.run_id }}
        name: Kernel Build ${{ github.run_id }}
        files: |
          kernel-artifacts.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
