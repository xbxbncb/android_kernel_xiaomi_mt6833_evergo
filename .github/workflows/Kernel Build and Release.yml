name: Kernel Build and Release

on:
  workflow_dispatch: # 手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        apt update && apt install -y \
        bc bison build-essential ccache clang cpio curl flex git \
        gnupg gperf imagemagick  libelf-dev liblz4-tool libncurses5-dev \
        libsdl1.2-dev libssl-dev libxml2-utils lzop pngcrush python3 \
        rsync schedtool squashfs-tools xsltproc zip zlib1g-dev \
        gcc-aarch64-linux-gnu g++-aarch64-linux-gnu lld make && apt clean

    - name: Setup ccache
      run: |
        echo "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" >> $GITHUB_ENV
        ccache -M 20G
        ccache -o compression=true

    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ${{ runner.os }}-ccache-${{ github.ref }}  # 基于分支名缓存
        restore-keys: ${{ runner.os }}-ccache-${{ github.ref }}

    - name: Build kernel
      run: |
        make ARCH=arm64 distclean || true
        
        make ARCH=arm64 \
          CC="ccache clang" \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld \
          KCFLAGS="-Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wno-unused-variable -Wno-unused-function -Wno-unused-label" \
          -j$(($(nproc) + 1)) evergo_defconfig

        make ARCH=arm64 \
          CC="ccache clang" \
          CROSS_COMPILE=aarch64-linux-gnu- \
          LD=ld.lld \
          KCFLAGS="-Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wno-unused-variable -Wno-unused-function -Wno-unused-label" \
          -j$(($(nproc) + 1)) 2>&1 | tee build.log

    - name: Save build log  # 关键修复：始终保存日志
      if: always()
      run: cp build.log . || true

    - name: Verify build artifacts
      run: |
        [ -f arch/arm64/boot/Image ] || (echo "Kernel image not found"; exit 1)
        [ -f arch/arm64/boot/dts/**/*.dtb ] || echo "Warning: No device tree files"  # 修复路径

    - name: Package artifacts
      run: |
        mkdir -p kernel-output
        cp arch/arm64/boot/Image* kernel-output/
        find arch/arm64/boot/dts -name '*.dtb' -exec cp --parents {} kernel-output/ \; 2>/dev/null || true
        cp System.map kernel-output/ || true
        tar -czvf kernel-artifacts.tar.gz kernel-output

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ github.run_id }}
        path: |
          kernel-artifacts.tar.gz
          build.log
        retention-days: 7

    - name: Create Release
      if: github.ref == 'refs/heads/main' && success()  # 关键修复：仅当构建成功
      uses: softprops/action-gh-release@v2
      with:
        tag_name: kernel-$(date +%Y%m%d-%H%M)
        name: Kernel Build ${{ github.run_number }}
        body: |
          Build log: [build.log](build.log)
          SHA: ${{ github.sha }}
        files: |
          kernel-artifacts.tar.gz
          build.log
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
