name: Kernel Build and Release

on:
  workflow_dispatch: # 手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm-slim # Debian 12
      options: --privileged # 启用特权模式

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y --no-install-recommends \
          git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev \
          g++-multilib python3-networkx libxml2-utils bzip2 libbz2-dev libbz2-1.0 \
          squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven \
          libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl \
          libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev \
          libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip bc clang bison \
          build-essential ccache curl flex git git-lfs gnupg gperf imagemagick \
          libelf-dev liblz4-tool libncurses5 gcc-10-aarch64-linux-gnu libncurses5-dev \
          libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync \
          schedtool squashfs-tools xsltproc zip zlib1g-dev lld

    - name: Setup ccache
      run: |
        echo "CCACHE_DIR=$(pwd)/.ccache" >> $GITHUB_ENV
        ccache -M 20G
        ccache -s

    - name: Cache ccache
      uses: actions/cache@v3
      with:
        path: .ccache
        key: ${{ runner.os }}-ccache-${{ hashFiles('**/*.c', '**/*.h', '**/Makefile') }}
        restore-keys: |
          ${{ runner.os }}-ccache-

    - name: Build kernel
      run: |
        export ARCH=arm64
        make CC="ccache clang" \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=aarch64-linux-gnueabi- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          KCFLAGS="-Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wno-unused-variable -Wno-unused-function -Wno-unused-label" \
          LD=ld.lld \
          LDFLAGS="-fuse-ld=lld" \
          -j$(nproc) \
          evergo_defconfig

        make CC="ccache clang" \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=aarch64-linux-gnueabi- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          KCFLAGS="-Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wno-unused-variable -Wno-unused-function -Wno-unused-label" \
          LD=ld.lld \
          LDFLAGS="-fuse-ld=lld" \
          -j$(nproc)

    - name: Show ccache stats
      run: ccache -s

    - name: Package artifacts
      run: |
        mkdir kernel-output
        cp arch/arm64/boot/* kernel-output/
        tar -czvf kernel-artifacts.tar.gz kernel-output

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kernel-binaries
        path: kernel-artifacts.tar.gz

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: kernel-${{ github.run_id }}
        release_name: Kernel Build ${{ github.run_id }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: kernel-artifacts.tar.gz
        asset_name: kernel-artifacts.tar.gz
        asset_content_type: application/gzip
