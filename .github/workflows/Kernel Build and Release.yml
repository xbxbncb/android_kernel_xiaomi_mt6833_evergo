name: Kernel Build and Release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '选择要构建的分支'
        required: true
        type: choice
        options:
          - main
          - ksu
        default: main

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm

    # 修复1：添加环境变量定义分支名
    env:
      BUILD_BRANCH: ${{ github.event.inputs.branch }}

    steps:
    - name: 准备内核源码
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BUILD_BRANCH }}
        fetch-depth: 0

    - name: 安装构建依赖
      run: |
        apt update && apt install -y \
        bc bison build-essential ccache clang cpio curl flex git \
        gnupg gperf imagemagick libelf-dev liblz4-tool libncurses5-dev \
        libsdl1.2-dev libssl-dev libxml2-utils lzop pngcrush python3 \
        rsync schedtool squashfs-tools xsltproc zip zlib1g-dev \
        gcc-aarch64-linux-gnu g++-aarch64-linux-gnu lld make bash && apt clean  # 添加bash安装

    - name: 配置ccache缓存
      run: |
        CCACHE_DIR="$GITHUB_WORKSPACE/.ccache"
        mkdir -p "$CCACHE_DIR"
        echo "CCACHE_DIR=$CCACHE_DIR" >> $GITHUB_ENV
        ccache -M 20G
        ccache -o compression=true

    # 修复2：使用正确的缓存键
    - name: 缓存ccache数据
      uses: actions/cache@v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ${{ runner.os }}-ccache-${{ env.BUILD_BRANCH }}-${{ hashFiles('Makefile') }}  # 使用实际分支名
        restore-keys: |
          ${{ runner.os }}-ccache-${{ env.BUILD_BRANCH }}
          ${{ runner.os }}-ccache-
      id: ccache-cache
      continue-on-error: true

    # 修复3：使用bash并修复条件判断
    - name: 构建内核
      shell: bash  # 指定使用bash
      run: |
        # 修复4：使用标准测试语法
        if [ "${{ steps.ccache-cache.outputs.cache-hit }}" = "true" ]; then
          echo "♻️ ccache缓存命中！缓存状态:"
          ccache -s
        else
          echo "ℹ️ 未找到ccache缓存，将重新构建"
        fi
        
        make ARCH=arm64 CC="ccache clang" CROSS_COMPILE=aarch64-linux-gnu- \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=aarch64-linux-gnueabi- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          KCFLAGS="-Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wno-unused-variable -Wno-unused-function -Wno-unused-label" \
          quiet=quiet_ O=out evergo_defconfig
        
        make ARCH=arm64 CC="ccache clang" CROSS_COMPILE=aarch64-linux-gnu- \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=aarch64-linux-gnueabi- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          KCFLAGS="-Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wno-unused-variable -Wno-unused-function -Wno-unused-label" \
          quiet=quiet_ O=out -j$(($(nproc) + 1)) 2>&1 | tee build.log
        
        ccache -s
        
    - name: 验证内核镜像
      run: |
        if [ ! -f out/arch/arm64/boot/Image.gz-dtb ]; then
          echo "❌ 错误：未找到内核镜像文件"
          exit 1
        fi
        echo "✅ 验证通过：out/arch/arm64/boot/Image.gz-dtb"
        
        # 显示文件大小
        file_size=$(du -h out/arch/arm64/boot/Image.gz-dtb | cut -f1)
        echo "ℹ️ 内核镜像大小: $file_size"

    # 保存构建日志，即使构建失败
    - name: 收集构建日志
      if: always()
      run: |
        echo "📝 收集构建日志..."
        mkdir -p build_logs
        
        # 保存主构建日志
        cp build.log build_logs/
        
        # 保存配置文件
        [ -f out/.config ] && cp out/.config build_logs/kernel_config || echo "⚠️ 未找到配置文件"
        
        # 保存其他构建日志
        find out -name "*.log" -exec cp {} build_logs/ \; 2>/dev/null || true
        
        # 创建日志压缩包
        tar -czvf build_logs.tar.gz build_logs
        echo "✅ 构建日志已保存：build_logs.tar.gz"

    # 创建可刷入的ZIP包
    - name: 制作AnyKernel3刷机包
      run: |
        echo "📦 准备AnyKernel3刷机包..."
        
        # 克隆AnyKernel3仓库
        git clone --depth=1 https://github.com/cuicanmx/AnyKernel3.git
        
        # 复制内核镜像
        cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        echo "ℹ️ 内核镜像已复制到AnyKernel3目录"
        
        # 创建刷机包
        cd AnyKernel3
        zip -r9 ../anykernel_flashable.zip * > /dev/null
        cd ..
        
        # 显示刷机包信息
        zip_size=$(du -h anykernel_flashable.zip | cut -f1)
        echo "✅ AnyKernel3刷机包创建完成：anykernel_flashable.zip ($zip_size)"

    # 打包原始构建产物
    - name: 打包内核产物
      run: |
        echo "📁 打包内核产物..."
        mkdir -p kernel_artifacts
        
        # 包含内核镜像
        cp out/arch/arm64/boot/Image.gz-dtb kernel_artifacts/
        
        # 包含配置文件
        [ -f out/.config ] && cp out/.config kernel_artifacts/kernel_config
        
        # 创建压缩包
        tar -czvf kernel_artifacts.tar.gz kernel_artifacts
        
        # 显示产物信息
        artifact_size=$(du -h kernel_artifacts.tar.gz | cut -f1)
        echo "✅ 内核产物打包完成：kernel_artifacts.tar.gz ($artifact_size)"

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ github.run_id }}
        path: |
          kernel_artifacts.tar.gz
          anykernel_flashable.zip
          build_logs.tar.gz
        retention-days: 7

    - name: 设置构建时间和标签
      run: |
        BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        TAG_SUFFIX=$(date -u +"%Y%m%dT%H%M%SZ")
        echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
        # 修复2：标签中包含分支名
        echo "TAG_NAME=${{ github.event.inputs.branch }}-kernel-$TAG_SUFFIX" >> $GITHUB_ENV
        echo "ℹ️ 生成的发布标签: $TAG_NAME"

    - name: 发布版本
      # 修复3：所有分支都发布，但内容不同
      if: success()
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.TAG_NAME }}
        # 修复4：发布名称包含分支名
        name: "${{ github.event.inputs.branch }} 内核构建 #${{ github.run_number }}"
        # 修复5：分支特定的发布内容
        body: |
          ### 🚀 内核构建详情
          - **构建分支**: ${{ github.event.inputs.branch }}
          - **构建日期**: ${{ env.BUILD_DATE }}
          - **构建日志**: [build_logs.tar.gz](build_logs.tar.gz)
          - **构建ID**: ${{ github.run_id }}
          - **发布标签**: ${{ env.TAG_NAME }}
          
          ### 📲 安装说明
          1. 下载 `anykernel_flashable.zip`
          2. 重启进入恢复模式 (推荐使用TWRP)
          3. 刷入ZIP文件
          4. 重启系统
          
          ### 📁 构建产物
          - `kernel_artifacts.tar.gz`: 原始内核产物 (包含内核镜像和配置文件)
          - `anykernel_flashable.zip`: 可直接刷入的刷机包
          
          ### ℹ️ 注意事项
          - **${{ github.event.inputs.branch }} 分支特性**:
            ${{ github.event.inputs.branch == 'main' && '• 稳定版本\n• 经过完整测试' || '• 实验性功能\n• 包含最新特性' }}
          - 请确保设备兼容性后再刷入
          - 刷机前建议备份重要数据
        files: |
          kernel_artifacts.tar.gz
          anykernel_flashable.zip
          build_logs.tar.gz
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
