name: Kernel Build and Release

on:
  workflow_dispatch: # 手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm # Debian 12
      options: --privileged # 启用特权模式

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        dpkg --add-architecture i386
        apt update && apt install -y \
        gcc-12-aarch64-linux-gnu binutils-aarch64-linux-gnu \
        ccache automake flex bison gperf build-essential \
        zip curl zlib1g-dev libxml2-utils libbz2-dev \
        squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool \
        make optipng maven libssl-dev pwgen bc \
        libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev \
        libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip \
        clang git git-lfs gnupg imagemagick libelf-dev \
        libsdl1.2-dev lzop rsync lld ninja-build \
        python3 python3-pip

# 可选：降级 GCC 或安装特定 Clang 版本
# apt install -y gcc-11-aarch64-linux-gnu
# wget https://apt.llvm.org/llvm.sh && chmod +x llvm.sh && ./llvm.sh 14
    - name: Setup ccache
      run: |
        echo "CCACHE_DIR=$(pwd)/.ccache" >> $GITHUB_ENV
        ccache -M 20G
        ccache -s

    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: .ccache
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache-

    - name: Build kernel
      run: |
        ARCH=arm64 make CC="ccache clang"  CCACHE_DIR=".cache" CROSS_COMPILE=aarch64-linux-gnu- CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE_COMPAT=aarch64-libux-gnueabi- CROSS_COMPILE_ARM32=arm-linux-gnueabi- KCFLAGS="-Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wno-unused-variable -Wno-unused-function -Wno-unused-label" quiet=quiet_ LD=ld.lld  -k -i  evergo_defconfig

        ARCH=arm64 make CC="ccache clang"  CCACHE_DIR=".cache" CROSS_COMPILE=aarch64-linux-gnu- CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE_COMPAT=aarch64-libux-gnueabi- CROSS_COMPILE_ARM32=arm-linux-gnueabi- KCFLAGS="-Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wno-unused-variable -Wno-unused-function -Wno-unused-label" quiet=quiet_ LD=ld.lld  -k -i  -j$(nproc)

    - name: Show ccache stats
      run: ccache -s

    - name: Package artifacts
      run: |
        mkdir kernel-output
        cp arch/arm64/boot/* kernel-output/
        tar -czvf kernel-artifacts.tar.gz kernel-output

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-binaries
        path: kernel-artifacts.tar.gz
        retention-days: 7

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: kernel-${{ github.run_id }}
        name: Kernel Build ${{ github.run_id }}
        files: |
          kernel-artifacts.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
