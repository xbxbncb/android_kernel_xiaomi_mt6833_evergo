name: Kernel Build and Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        apt update && apt install -y \
        bc bison build-essential ccache clang cpio curl flex git \
        gnupg gperf imagemagick  libelf-dev liblz4-tool libncurses5-dev \
        libsdl1.2-dev libssl-dev libxml2-utils lzop pngcrush python3 \
        rsync schedtool squashfs-tools xsltproc zip zlib1g-dev \
        gcc-aarch64-linux-gnu g++-aarch64-linux-gnu lld make && apt clean

    - name: Setup ccache
      run: |
        echo "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" >> $GITHUB_ENV
        ccache -M 20G
        ccache -o compression=true

    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ${{ runner.os }}-ccache-${{ github.ref }}
        restore-keys: ${{ runner.os }}-ccache-${{ github.ref }}

    - name: Build kernel
      run: |
        # 清理和配置
        make ARCH=arm64 CC="ccache clang" CROSS_COMPILE=aarch64-linux-gnu- \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=aarch64-linux-gnueabi- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          KCFLAGS="-Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wno-unused-variable -Wno-unused-function -Wno-unused-label" \
          quiet=quiet_ O=out evergo_defconfig
        
        # 实际构建
        make ARCH=arm64 CC="ccache clang" CROSS_COMPILE=aarch64-linux-gnu- \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=aarch64-linux-gnueabi- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          KCFLAGS="-Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wno-unused-variable -Wno-unused-function -Wno-unused-label" \
          quiet=quiet_ O=out -j$(($(nproc) + 1)) 2>&1 | tee build.log
    
    - name: Save build log
      if: always()
      run: cp build.log . || true
      
    # 简化的验证步骤：只检查内核镜像是否存在
    - name: Verify kernel image
      run: |
        [ -f out/arch/arm64/boot/* ] || (echo "Kernel image not found"; exit 1)
      
    # 优化后的打包步骤：只打包 boot 目录内容
    - name: Package artifacts
      run: |
        # 创建输出目录
        mkdir -p kernel-output
        # 直接复制整个 boot 目录内容
        cp -r out/arch/arm64/boot/* kernel-output/
        tar -czvf kernel-artifacts.tar.gz kernel-output

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ github.run_id }}
        path: |
          kernel-artifacts.tar.gz
          build.log
        retention-days: 7

    - name: Create Release
      if: github.ref == 'refs/heads/main' && success()
      uses: softprops/action-gh-release@v2
      with:
        tag_name: kernel-normal-$(date +%Y%m%d-%H%M)
        name: Kernel Build ${{ github.run_number }}
        body: |
          Build log: [build.log](build.log)
          SHA: ${{ github.sha }}
        files: |
          kernel-artifacts.tar.gz
          build.log
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
